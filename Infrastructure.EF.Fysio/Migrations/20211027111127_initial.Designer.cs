// <auto-generated />
using System;
using Infrastructure.EF.Fysio;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.EF.Fysio.Migrations
{
    [DbContext(typeof(FysioDBContext))]
    [Migration("20211027111127_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.AppUser", b =>
                {
                    b.Property<int>("appUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("patientId")
                        .HasColumnType("int");

                    b.Property<int?>("practitionerId")
                        .HasColumnType("int");

                    b.HasKey("appUserId");

                    b.HasIndex("patientId");

                    b.HasIndex("practitionerId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Core.Domain.Appointment", b =>
                {
                    b.Property<int>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isTreatment")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("patientId")
                        .HasColumnType("int");

                    b.Property<int?>("practitionerId")
                        .HasColumnType("int");

                    b.Property<string>("specialties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("treatmentId")
                        .HasColumnType("int");

                    b.HasKey("appointmentId");

                    b.HasIndex("appointmentId")
                        .IsUnique();

                    b.HasIndex("patientId");

                    b.HasIndex("practitionerId");

                    b.HasIndex("treatmentId");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("Core.Domain.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("patientFileId")
                        .HasColumnType("int");

                    b.Property<int?>("patientId")
                        .HasColumnType("int");

                    b.Property<int?>("practitionerId")
                        .HasColumnType("int");

                    b.Property<bool>("visibleForPatient")
                        .HasColumnType("bit");

                    b.HasKey("commentId");

                    b.HasIndex("commentId")
                        .IsUnique();

                    b.HasIndex("patientFileId");

                    b.HasIndex("patientId");

                    b.HasIndex("practitionerId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Core.Domain.Diagnosis", b =>
                {
                    b.Property<int>("diagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bodyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diagnosisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pathology")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("diagnosisId");

                    b.HasIndex("diagnosisId")
                        .IsUnique();

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("patientFileId")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("patientId");

                    b.HasIndex("patientFileId")
                        .IsUnique();

                    b.HasIndex("patientId")
                        .IsUnique();

                    b.ToTable("patients");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Property<int>("fileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IntakeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("diagnosisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("intakeBypractitionerId")
                        .HasColumnType("int");

                    b.Property<int?>("intakeSupervisedBypractitionerId")
                        .HasColumnType("int");

                    b.Property<string>("mainComplaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("mainPractitionerpractitionerId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<string>("studentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("treatmentPlanId")
                        .HasColumnType("int");

                    b.HasKey("fileId");

                    b.HasIndex("fileId")
                        .IsUnique();

                    b.HasIndex("intakeBypractitionerId");

                    b.HasIndex("intakeSupervisedBypractitionerId");

                    b.HasIndex("mainPractitionerpractitionerId");

                    b.HasIndex("treatmentPlanId");

                    b.ToTable("patientFiles");
                });

            modelBuilder.Entity("Core.Domain.Practitioner", b =>
                {
                    b.Property<int>("practitionerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("practitionerId");

                    b.HasIndex("practitionerId")
                        .IsUnique();

                    b.ToTable("practitioners");
                });

            modelBuilder.Entity("Core.Domain.Treatment", b =>
                {
                    b.Property<int>("treatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("hasMandatoryExplanation")
                        .HasColumnType("bit");

                    b.Property<string>("treatmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("treatmentId");

                    b.HasIndex("treatmentId")
                        .IsUnique();

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("Core.Domain.TreatmentPlan", b =>
                {
                    b.Property<int>("treatmentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("diagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<string>("sessionDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("treatmentId")
                        .HasColumnType("int");

                    b.Property<int>("weeklyAppointments")
                        .HasColumnType("int");

                    b.HasKey("treatmentPlanId");

                    b.HasIndex("treatmentPlanId")
                        .IsUnique();

                    b.ToTable("treatmentPlans");
                });

            modelBuilder.Entity("Core.Domain.AppUser", b =>
                {
                    b.HasOne("Core.Domain.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientId");

                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany()
                        .HasForeignKey("practitionerId");

                    b.Navigation("patient");

                    b.Navigation("practitioner");
                });

            modelBuilder.Entity("Core.Domain.Appointment", b =>
                {
                    b.HasOne("Core.Domain.Patient", "patient")
                        .WithMany("appointments")
                        .HasForeignKey("patientId");

                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany("appointments")
                        .HasForeignKey("practitionerId");

                    b.HasOne("Core.Domain.Treatment", "treatment")
                        .WithMany()
                        .HasForeignKey("treatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");

                    b.Navigation("practitioner");

                    b.Navigation("treatment");
                });

            modelBuilder.Entity("Core.Domain.Comment", b =>
                {
                    b.HasOne("Core.Domain.PatientFile", "patientFile")
                        .WithMany("comments")
                        .HasForeignKey("patientFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientId");

                    b.HasOne("Core.Domain.Practitioner", "practitioner")
                        .WithMany()
                        .HasForeignKey("practitionerId");

                    b.Navigation("patient");

                    b.Navigation("patientFile");

                    b.Navigation("practitioner");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.HasOne("Core.Domain.PatientFile", "patientFile")
                        .WithOne("patient")
                        .HasForeignKey("Core.Domain.Patient", "patientFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patientFile");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.HasOne("Core.Domain.Practitioner", "intakeBy")
                        .WithMany()
                        .HasForeignKey("intakeBypractitionerId");

                    b.HasOne("Core.Domain.Practitioner", "intakeSupervisedBy")
                        .WithMany()
                        .HasForeignKey("intakeSupervisedBypractitionerId");

                    b.HasOne("Core.Domain.Practitioner", "mainPractitioner")
                        .WithMany()
                        .HasForeignKey("mainPractitionerpractitionerId");

                    b.HasOne("Core.Domain.TreatmentPlan", "treatmentPlan")
                        .WithMany()
                        .HasForeignKey("treatmentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("intakeBy");

                    b.Navigation("intakeSupervisedBy");

                    b.Navigation("mainPractitioner");

                    b.Navigation("treatmentPlan");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Navigation("appointments");
                });

            modelBuilder.Entity("Core.Domain.PatientFile", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Core.Domain.Practitioner", b =>
                {
                    b.Navigation("appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
